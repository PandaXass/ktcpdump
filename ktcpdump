#!/usr/bin/env bash
set -e
set -o pipefail
# set -x

TOP_PID=$$
trap "exit 1" TERM
term() {
    kill -s TERM $TOP_PID
}


usage() {
cat << EOT
usage: $0 subcommand

subcommands:
    usage                             show this usage
    create                            create DaemonSet without running tcpdump
    run [ options ] [ expression ]    create DaemonSet and run tcpdump
    rerun                             restart DaemonSet Pods to rerun tcpdump
    cmd                               show tcpdump command in DaemonSet
    status                            show tcpdump status in DaemonSet
    logs                              show DaemonSet Pod logs
    cp <capture_file>                 copy capture files from DaemonSet Pods to current working directory
    purge                             delete DaemonSet
    version                           show versions of ktcpdump and tcpdump

default tcpdump options:
    tcpdump -nn -i any -c 10000

custom filters:
    [ns_name/]pod/<pod_name>
    [ns_name/]deploy/<deploy_name>
    [ns_name/]ds/<ds_name>
EOT

exit 1
}

create() {
    sed -e "s/__DEFAULT_ARGS__/--version/" \
        -e "s/__EXTRA_ARGS__//" \
        kube/ds.yaml | kubectl apply --validate=true -f -
}

_get_curr_ns() {
    CURR_NS=$(kubectl config view -o jsonpath={..namespace})
}

# Return: namespace resource_type resource_name
_parse_filter() {
    declare local filter
    IFS='/' read -r -a filter <<< "$1"

    if [ "${#filter[@]}" -eq 2 ]; then
        echo "${CURR_NS} ${filter[@]}"
    elif [ "${#filter[@]}" -eq 3 ]; then
        echo "${filter[@]}"
    else
        >&2 echo "ktcpdump: can't parse filter expression: $1"
        term
    fi
}

_get_pod_ip() {
    local ns=$1
    local rtype=$2
    local rname=$3

    case "$rtype" in
        pod)
            kubectl get po $rname -n $ns --no-headers -o custom-columns=:status.podIP
            ;;
        deploy|ds)
            local selector=$(kubectl get $rtype $rname -n $ns -o json \
                | jq -r .spec.selector.matchLabels \
                | jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|join(",")')
            kubectl get pods -n $ns -l $selector -o custom-columns=:status.podIP
            ;;
    esac

    if [ $? -ne 0 ]; then
        term
    fi
}

_get_filter_exp() {
    if [ "$#" -eq 1 ]; then
        echo "host $1"
    elif [ "$#" -gt 1 ]; then
        echo "host '($1$(printf ' or %s' ${@:2}))'"
    else
        >&2 echo "ktcpdump: can't parse filter expression: $1"
        term
    fi
}

run () {
    local default_args="-nn -i any -c 10000"

    declare -a local extra_args=()
    for i in "$@"
    do
        case "$i" in
            *\ *) # Add lost quotes from command line
                extra_args+=("'$i'")
                ;;
            *)
                extra_args+=("$i")
                ;;
        esac
    done

    # Get current namespace
    _get_curr_ns

    # Loop over array with index
    for i in "${!extra_args[@]}"
    do
        local arg="${extra_args[$i]}"

        # Translate custom filters to pcap-filter
        if [[ "$arg" =~ (pod|deploy|ds)/  ]]; then
            extra_args[$i]=$(_get_filter_exp $(_get_pod_ip $(_parse_filter $arg)))
        # Escape ampersand
        elif [[ "$arg" ==  *"&"* ]]; then
            extra_args[$i]="${arg/&/\&}"
        fi
    done

    extra_args=$(printf "%s " "${extra_args[@]}")
    echo "/usr/sbin/tcpdump $default_args $extra_args"
    sed -e "s/__DEFAULT_ARGS__/$default_args/" \
        -e "s/__EXTRA_ARGS__/$extra_args/" \
        kube/ds.yaml | kubectl apply --validate=true -f -
}

rerun () {
    kubectl rollout restart -n kube-system daemonset/ktcpdump
}

cmd () {
    echo $(kubectl get -n kube-system daemonset/ktcpdump -o=jsonpath='{.spec.template.spec.containers[0].args[0]}')
}

status () {
    local pods=$(kubectl get pods -n kube-system -l app=ktcpdump -o=jsonpath='{.items[*].metadata.name}')
    for p in $pods
    do
        kubectl exec $p -n kube-system -- pgrep tail &> /dev/null &
        if [ $? -ne 0 ]; then
            echo "$p - tcpdump ongoing"
        else
            echo "$p - tcpdump done"
        fi
    done
}

logs () {
    kubectl logs -n kube-system -l app=ktcpdump --tail=-1
}

cp () {
    local pods=$(kubectl get pods -n kube-system -l app=ktcpdump -o=jsonpath='{.items[*].metadata.name}')
    local dir=$(echo "ktcpdump-cp-$(date +%Y%m%d%H%M%S)")
    mkdir -p ./$dir
    for p in $pods
    do
        cp="kubectl cp kube-system/$p:$1 ./$dir/$p.$1 &"
        echo "$cp"
        eval "$cp"
    done
}

purge () {
    kubectl delete -n kube-system daemonset/ktcpdump
}

version () {
    version="0.1.0"

    echo "ktcpdump version $version"
    local pod=$(kubectl get pods -n kube-system -l app=ktcpdump --no-headers -o custom-columns=:metadata.name | head -n 1)
    kubectl exec $pod -n kube-system -- tcpdump --version
}

case "$1" in
    help|usage)
        usage
        ;;
    create)
        create
        ;;
    run)
        run "${@:2}"
        ;;
    rerun)
        rerun
        ;;
    cmd)
        cmd
        ;;
    status)
        status
        ;;
    logs)
        logs
        ;;
    cp)
        cp $2
        ;;
    purge)
        purge
        ;;
    version)
        version
        ;;
    *)
        usage
        ;;
esac
